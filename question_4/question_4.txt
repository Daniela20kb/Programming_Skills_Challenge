#include <stdio.h>
#include <iostream>
#include <string.h>
using namespace std;

string ConcatRemove(string s, string t, int k)
{
    // constrains
    int len_s = s.length();
    int len_t = t.length();
    if ((len_s < 1) || (len_s > 100))
        return("no");
    if ((len_t < 1) || (len_t > 100))
        return("no");
    if((k < 1) || (k > 100))
        return("no");
        
    string abc = "abcdefghijklmnopqrstuvwxyz";
    size_t found;
    for (int i = 0; i < len_s; i++)
    {
        char letter = s[i];
        found = abc.find(letter);
        if (found==std::string::npos)
            return("no");
    }
    for (int i = 0; i < len_t; i++)
    {
        char letter = t[i];
        found = abc.find(letter);
        if (found==std::string::npos)
            return("no");
    }
    
    // implementation
    int operations = 0;
    string common = "";
    if (s != t)
    {
        for(int i = 0; (i < len_s) && (i < len_t); i++)
        {
            if(s[i] == t[i])
            {
                common += s[i];
            }
        }
        int len_c = common.length();
        if (len_c > 0)
        {
            // operations = chars to remove + chars to concat
            operations = (len_s - len_c) + (len_t - len_c);
        }
    }
    if (operations != k)
        return("no");
        
    return("yes");
}

int main()
{
    string s;// = "blablablabla";
    string t;// = "blablabcde";
    int k;// = 8;
    cout << "s: ";
    cin >> s;
    cout << endl;
    cout << "t: ";
    cin >> t;
    cout << endl;
    cout << "k: ";
    cin >> k;
    cout << endl;
  
    string answer = ConcatRemove(s, t, k);
    cout << answer;

    return 0;
}

// there is a problem on example 2 (s=tab and t=tab, they are equal, so k=0 and the answer is "no")
